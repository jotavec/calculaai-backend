// =======================
// Conexão com PostgreSQL
// =======================
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =======================
// Prisma Client
// =======================
generator client {
  provider = "prisma-client-js"
}

// =======================
// MODELS
// =======================

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  cpf          String?
  telefone     String?

  // Relacionamentos
  ingredients            Ingredient[]
  fixedCostCategories    FixedCostCategory[]
  fixedCosts             FixedCost[]
  recipes                Recipe[]
  pricingSettings        PricingSetting?
  companyConfig          CompanyConfig?
  salesGoals             SalesGoal[]
  salesResults           SalesResult[]
  categorias             Categoria[]            @relation("UserCategorias")
  marcas                 Marca[]
  funcionarios           Funcionario[]
  encargosSobreVenda     EncargosSobreVenda[]
  blocos                 Bloco[]
  blocoAtivos            BlocoAtivos[]
  entradasEstoque        EntradaEstoque[]
  categoriasNutricionais CategoriaNutricional[]
  tiposProduto           TipoProduto[]
  saidasEstoque          SaidaEstoque[] // <— relação adicionada
  preferenciasColunas    PreferenciaColunas? // <— relação adicionada

  // Configs
  filtroFaturamentoMediaTipo String?
  avatarUrl                  String?
  plano                      String  @default("gratuito")

  @@index([email])
}

model Funcionario {
  id                   String   @id @default(uuid())
  nome                 String
  cargo                String
  tipoMaoDeObra        String
  salario              String
  totalHorasMes        String
  horasPorDia          String?
  diasPorSemana        String?
  fgts                 String
  inss                 String
  rat                  String
  ferias13             String
  valeTransporte       String
  valeAlimentacao      String
  valeRefeicao         String
  planoSaude           String
  outros               String
  fgtsValor            String
  inssValor            String
  ratValor             String
  ferias13Valor        String
  valeTransporteValor  String
  valeAlimentacaoValor String
  valeRefeicaoValor    String
  planoSaudeValor      String
  outrosValor          String
  userId               String
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([userId])
}

model FixedCostCategory {
  id         String      @id @default(uuid())
  name       String
  userId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  fixedCosts FixedCost[]
  createdAt  DateTime    @default(now())

  @@index([userId])
}

model FixedCost {
  id         String            @id @default(uuid())
  userId     String
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  categoryId String
  category   FixedCostCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  name       String
  value      Float
  createdAt  DateTime          @default(now())

  @@index([userId])
  @@index([categoryId])
}

model Ingredient {
  id          String             @id @default(uuid())
  userId      String
  user        User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  brand       String?
  unitType    String
  qtyPerPack  Float
  pricePack   Float
  createdAt   DateTime           @default(now())
  recipeItems RecipeIngredient[]

  @@index([userId])
}

model Recipe {
  id                    String             @id @default(uuid())
  userId                String
  user                  User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  name                  String
  yieldQty              Float
  yieldUnit             String
  notes                 String?
  createdAt             DateTime           @default(now())
  ingredients           RecipeIngredient[]
  ingredientes          Json?
  embalagens            Json?
  subReceitas           Json?
  maoDeObra             Json?
  imagemFinal           String?
  conservacaoData       Json?
  passosPreparo         Json?
  tipoSelecionado       Json?
  dataUltimaAtualizacao String?
  tempoTotal            String?
  tempoUnidade          String?
  precoVenda            String?
  pesoUnitario          String?
  descontoReais         String?
  descontoPercentual    String?
  blocoMarkupAtivo      String?

  @@index([userId])
}

model RecipeIngredient {
  id           String     @id @default(uuid())
  recipeId     String
  ingredientId String
  recipe       Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  qtyUsed      Float

  @@index([recipeId])
  @@index([ingredientId])
}

model PricingSetting {
  id                String  @id @default(uuid())
  userId            String  @unique
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  markupPercent     Float
  lossPercent       Float
  commissionPercent Float
  taxPercent        Float
  embedFixedCosts   Boolean
}

model CompanyConfig {
  id                String   @id @default(uuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyName       String
  cnpj              String?
  phone             String?
  cep               String?
  rua               String?
  numero            String?
  bairro            String?
  cidade            String?
  estado            String?
  rentCost          Float?
  energyCost        Float?
  salaryCost        Float?
  defaultMarkup     Float?
  defaultTax        Float?
  defaultCommission Float?
  createdAt         DateTime @default(now())
}

model SalesGoal {
  id     String @id @default(uuid())
  userId String
  month  String
  value  Float
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([month])
}

model SalesResult {
  id     String @id @default(uuid())
  userId String
  month  String
  value  Float
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([month])
}

model Categoria {
  id     String @id @default(uuid())
  nome   String
  userId String
  user   User   @relation(fields: [userId], references: [id], name: "UserCategorias", onDelete: Cascade)

  @@index([userId])
}

model Marca {
  id     String @id @default(uuid())
  nome   String
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model EncargosSobreVenda {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Bloco {
  id                 Int           @id @default(autoincrement())
  nome               String
  markup             String?
  markupIdeal        String?
  gastosFaturamento  String?
  impostos           String?
  taxasPagamento     String?
  comissoes          String?
  outros             String?
  lucroDesejado      String?
  mediaFaturamento   String?
  custosAtivos       String?
  observacoes        String?
  userId             String
  totalEncargosReais Float?        @default(0)
  user               User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  ativos             BlocoAtivos[]

  @@index([userId])
}

model BlocoAtivos {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  blocoId   Int
  bloco     Bloco    @relation(fields: [blocoId], references: [id], onDelete: Cascade)
  ativos    Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([blocoId])
}

model Produto {
  id                  String                     @id @default(uuid())
  codigo              String                     @unique
  codBarras           String?
  nome                String
  categoria           String
  marca               String[] // Postgres text[]
  unidade             String
  estoque             String
  custo               String
  ativo               Boolean
  totalEmbalagem      String?
  custoTotal          String?
  custoUnitario       String?
  estoqueMinimo       String?
  imagem              String?
  rotuloNutricional   Json?
  entradasEstoque     EntradaEstoque[]
  rotulosNutricionais ProdutoRotuloNutricional[]
  SaidaEstoque        SaidaEstoque[]

  @@index([codigo])
}

model PreferenciaColunas {
  userId  String @id
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  colunas String
}

model EntradaEstoque {
  id         String  @id @default(uuid())
  produtoId  String
  produto    Produto @relation(fields: [produtoId], references: [id], onDelete: Cascade)
  quantidade Int
  valor      Float?
  lote       String?
  data       String
  userId     String
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([produtoId])
  @@index([userId])
}

model Fornecedor {
  id           Int      @id @default(autoincrement())
  razaoSocial  String
  cnpjCpf      String
  nomeVendedor String?
  telefone     String
  email        String?
  endereco     String?
  observacoes  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  tempField    String?
}

model SaidaEstoque {
  id         String    @id @default(uuid())
  produtoId  String
  produto    Produto   @relation(fields: [produtoId], references: [id], onDelete: Cascade)
  quantidade Int
  userId     String?
  user       User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  data       DateTime?

  @@index([produtoId])
  @@index([userId])
}

model CategoriaNutricional {
  id                  String                     @id @default(uuid())
  descricao           String
  unidade             String
  userId              String
  user                User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  rotulosNutricionais ProdutoRotuloNutricional[]

  @@index([userId])
}

model ProdutoRotuloNutricional {
  id                     String               @id @default(uuid())
  produtoId              String
  categoriaNutricionalId String
  quantidade             String
  vd                     String?
  produto                Produto              @relation(fields: [produtoId], references: [id], onDelete: Cascade)
  categoriaNutricional   CategoriaNutricional @relation(fields: [categoriaNutricionalId], references: [id], onDelete: Cascade)

  @@unique([produtoId, categoriaNutricionalId])
  @@index([produtoId])
  @@index([categoriaNutricionalId])
}

model TipoProduto {
  id        String   @id @default(uuid())
  nome      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([userId])
}
